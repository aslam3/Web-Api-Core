// <auto-generated />
using System;
using JobPortalApp.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobPortalApp.Migrations
{
    [DbContext(typeof(jobdbcontext))]
    [Migration("20200929145623_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("JobPortalApp.Model.db_models.AddressManagement.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictName = "Dhaka"
                        },
                        new
                        {
                            Id = 2,
                            DistrictName = "Gazipur"
                        },
                        new
                        {
                            Id = 3,
                            DistrictName = "Manikganj"
                        },
                        new
                        {
                            Id = 4,
                            DistrictName = "Munshiganj"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AddressManagement.PoliceStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("policeStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 1,
                            Name = "Pallabi"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("adminUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Designation = "Office Executive",
                            FirstName = "Shaheen",
                            LastName = "Hossain",
                            UserId = new Guid("9a312145-99ed-4b25-a8a8-e8207083c164")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.JobProviderUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("PoliceStationId")
                        .HasColumnType("int");

                    b.Property<string>("TradeLicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PoliceStationId");

                    b.HasIndex("UserId");

                    b.ToTable("jobProviderCompanies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = " 55/B, Noakhali Tower,Purana Paltan, Dhaka, Bangladesh 1000",
                            BusinessCategoryId = 1,
                            BusinessDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CompanyName = "DotNet IT Solution Ltd.",
                            ContactPersonEmail = "antonio@employer.com",
                            ContactPersonName = "Antonio",
                            ContactPersonPhoneNo = "01911111111",
                            PoliceStationId = 1,
                            TradeLicenseNo = "T123456789",
                            UserId = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3"),
                            WebsiteUrl = "www.domain.com"
                        },
                        new
                        {
                            Id = 2,
                            Address = " 55/B, Noakhali Tower,Purana Paltan, Dhaka, Bangladesh 1000",
                            BusinessCategoryId = 2,
                            BusinessDescription = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                            CompanyName = "DotNet IT Solution Ltd.",
                            ContactPersonEmail = "antonio@employer.com",
                            ContactPersonName = "Antonio",
                            ContactPersonPhoneNo = "01911111111",
                            PoliceStationId = 1,
                            TradeLicenseNo = "T123456789",
                            UserId = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071"),
                            WebsiteUrl = "www.domain.com"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.JobSeekerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FathersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MothersName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("NidNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("ResumeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("permanent_PoliceStationId")
                        .HasColumnType("int");

                    b.Property<int>("present_PoliceStationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("present_PoliceStationId");

                    b.ToTable("jobSeekerUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1990, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FathersName = "Md Rahman",
                            FirstName = "Rahim",
                            Gender = 0,
                            LastName = "Mia",
                            MaritalStatus = 0,
                            MobileNo = "01912701613",
                            MothersName = "Rahima Begum",
                            Nationality = 0,
                            NidNo = "199011112233445566",
                            PermanentAddress = "Dhaka",
                            PresentAddress = "Dhaka",
                            Religion = 0,
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02"),
                            permanent_PoliceStationId = 1,
                            present_PoliceStationId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1990, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FathersName = "Md Rahman",
                            FirstName = "Rahim",
                            Gender = 0,
                            LastName = "Mia",
                            MaritalStatus = 0,
                            MobileNo = "01912701613",
                            MothersName = "Rahima Begum",
                            Nationality = 0,
                            NidNo = "199011112233445566",
                            PermanentAddress = "Dhaka",
                            PresentAddress = "Dhaka",
                            Religion = 0,
                            UserId = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2"),
                            permanent_PoliceStationId = 1,
                            present_PoliceStationId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1990, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FathersName = "Md Rahman",
                            FirstName = "Rahim",
                            Gender = 0,
                            LastName = "Mia",
                            MaritalStatus = 0,
                            MobileNo = "01912701613",
                            MothersName = "Rahima Begum",
                            Nationality = 0,
                            NidNo = "199011112233445566",
                            PermanentAddress = "Dhaka",
                            PresentAddress = "Dhaka",
                            Religion = 0,
                            UserId = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77"),
                            permanent_PoliceStationId = 1,
                            present_PoliceStationId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1990, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FathersName = "Md Rahman",
                            FirstName = "Rahim",
                            Gender = 0,
                            LastName = "Mia",
                            MaritalStatus = 0,
                            MobileNo = "01912701613",
                            MothersName = "Rahima Begum",
                            Nationality = 0,
                            NidNo = "199011112233445566",
                            PermanentAddress = "Dhaka",
                            PresentAddress = "Dhaka",
                            Religion = 0,
                            UserId = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8"),
                            permanent_PoliceStationId = 1,
                            present_PoliceStationId = 1
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.BusinessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("businessCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT & Telecommunication"
                        },
                        new
                        {
                            Id = 2,
                            Name = " Engineer/Architects"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HR/Org. Development"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.ApplyJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpectedSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("JobCircularId")
                        .HasColumnType("int");

                    b.Property<int?>("JobSeekerUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobCircularId");

                    b.HasIndex("JobSeekerUserId");

                    b.HasIndex("UserId");

                    b.ToTable("applyJobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ExpectedSalary = 25000m,
                            JobCircularId = 1,
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.CvBankQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BusinessCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("PackagesId");

                    b.HasIndex("UserId");

                    b.ToTable("cvBuyInfos");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.InterviewInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppliedJobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvitationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvitationMassage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MassageSubject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppliedJobId");

                    b.ToTable("interviewInvitations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedJobId = 1,
                            InvitationDate = new DateTime(2020, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            InvitationMassage = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters",
                            MassageSubject = "Interview Invitation"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CvBuyInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackagesId");

                    b.HasIndex("UserId");

                    b.ToTable("invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CvBuyInfoId = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobPostId = 1,
                            PackagesId = 1,
                            PaymentStatus = true,
                            Quantity = 1,
                            TotalAmount = 500m,
                            TransactionId = "TX5412451XDAE49SFW",
                            UnitPrice = 500,
                            UserId = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3")
                        },
                        new
                        {
                            Id = 2,
                            CvBuyInfoId = 0,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobPostId = 2,
                            PackagesId = 1,
                            PaymentStatus = true,
                            Quantity = 1,
                            TotalAmount = 500m,
                            TransactionId = "TX5412451XDAESS49SFW",
                            UnitPrice = 500,
                            UserId = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CircularExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CircularStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobResponsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinimumEducationLevelId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfVacancies")
                        .HasColumnType("int");

                    b.Property<string>("Otherbenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("MinimumEducationLevelId");

                    b.HasIndex("PackageId");

                    b.HasIndex("userId");

                    b.ToTable("jobPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInformation = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            BusinessCategoryId = 1,
                            CircularExpiredDate = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            CircularStartDate = new DateTime(2020, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Designation = "Sr. Developer",
                            EmploymentStatus = 0,
                            Experience = "5 Years",
                            JobLocation = "Mirpur DOHS",
                            JobResponsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            JobTitle = "ASP.NET Web Developer Needed",
                            MaxAge = 30,
                            MinimumEducationLevelId = 1,
                            NoOfVacancies = 10,
                            Otherbenefits = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            PackageId = 1,
                            PostStatus = 1,
                            Salary = "Negotiable",
                            gender = 2,
                            userId = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3")
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInformation = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            BusinessCategoryId = 1,
                            CircularExpiredDate = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            CircularStartDate = new DateTime(2020, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Designation = "Sr. Developer",
                            EmploymentStatus = 0,
                            Experience = "5 Years",
                            JobLocation = "Mirpur DOHS",
                            JobResponsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            JobTitle = "ASP.NET Web Developer Needed",
                            MaxAge = 30,
                            MinimumEducationLevelId = 1,
                            NoOfVacancies = 10,
                            Otherbenefits = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            PackageId = 1,
                            PostStatus = 0,
                            Salary = "Negotiable",
                            gender = 2,
                            userId = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.Packages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("servicePackages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            MaxValue = 0,
                            Name = "Basic Listing",
                            PackageType = 0,
                            Price = 500m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            MaxValue = 0,
                            Name = "Standard Listing",
                            PackageType = 0,
                            Price = 1000m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            MaxValue = 0,
                            Name = "Premium Listing",
                            PackageType = 0,
                            Price = 1500m
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.ViewResumeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobSeekerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("JobSeekerUserId");

                    b.ToTable("viewResumeLists");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.AcademicInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorSub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarkScale")
                        .HasColumnType("int");

                    b.Property<decimal>("ObtainMark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("ResultTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("academicInformation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DegreeId = 1,
                            Duration = "4",
                            InstituteName = "DU",
                            MajorSub = "Physics",
                            MarkScale = 4,
                            ObtainMark = 3.1m,
                            PassingYear = "2018",
                            ResultTypeId = 4,
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02")
                        },
                        new
                        {
                            Id = 2,
                            DegreeId = 1,
                            Duration = "4",
                            InstituteName = "DU",
                            MajorSub = "Physics",
                            MarkScale = 4,
                            ObtainMark = 3.1m,
                            PassingYear = "2018",
                            ResultTypeId = 4,
                            UserId = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2")
                        },
                        new
                        {
                            Id = 3,
                            DegreeId = 1,
                            Duration = "4",
                            InstituteName = "DU",
                            MajorSub = "Physics",
                            MarkScale = 4,
                            ObtainMark = 3.1m,
                            PassingYear = "2018",
                            ResultTypeId = 4,
                            UserId = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77")
                        },
                        new
                        {
                            Id = 4,
                            DegreeId = 1,
                            Duration = "4",
                            InstituteName = "DU",
                            MajorSub = "Physics",
                            MarkScale = 4,
                            ObtainMark = 3.1m,
                            PassingYear = "2018",
                            ResultTypeId = 4,
                            UserId = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.CareerInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CareerObjective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareerSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ExpectedSalary")
                        .HasColumnType("real");

                    b.Property<float>("PresentSalary")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("businessCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("businessCategoryId");

                    b.ToTable("careerInformation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CareerObjective = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.",
                            CareerSummary = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                            ExpectedSalary = 35000f,
                            PresentSalary = 25000f,
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CareerObjective = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.",
                            CareerSummary = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                            ExpectedSalary = 35000f,
                            PresentSalary = 25000f,
                            UserId = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CareerObjective = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.",
                            CareerSummary = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                            ExpectedSalary = 35000f,
                            PresentSalary = 25000f,
                            UserId = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CareerObjective = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.",
                            CareerSummary = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                            ExpectedSalary = 35000f,
                            PresentSalary = 25000f,
                            UserId = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8"),
                            businessCategoryId = 1
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.DegreeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("educationLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("educationLevelId");

                    b.ToTable("degreeInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bachelor of Science (BSc)",
                            educationLevelId = 6
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelor of Art (BA)",
                            educationLevelId = 6
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bachelor of Business Administration (BBA)",
                            educationLevelId = 6
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("educationLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "PSC/5 PASS"
                        },
                        new
                        {
                            Id = 2,
                            Title = "JSC/JDC/8 PASS"
                        },
                        new
                        {
                            Id = 3,
                            Title = "SECONDARY"
                        },
                        new
                        {
                            Id = 4,
                            Title = "HIGHER SECONDARY"
                        },
                        new
                        {
                            Id = 5,
                            Title = "DIPLOMA"
                        },
                        new
                        {
                            Id = 6,
                            Title = "BACHELOR/HONORS"
                        },
                        new
                        {
                            Id = 7,
                            Title = "MASTERS"
                        },
                        new
                        {
                            Id = 8,
                            Title = "PhD (Doctor of Philosophy)"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.EmploymentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JobEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JobstartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("businessCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("businessCategoryId");

                    b.ToTable("employmentHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyAddress = "Mirpur, Dhaka",
                            CompanyName = "ABC Ltd.",
                            Department = "Product",
                            Designation = "Office Executive",
                            JobEndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobstartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyAddress = "Mirpur, Dhaka",
                            CompanyName = "ABC Ltd.",
                            Department = "Product",
                            Designation = "Office Executive",
                            JobEndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobstartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            UserId = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompanyAddress = "Mirpur, Dhaka",
                            CompanyName = "ABC Ltd.",
                            Department = "Product",
                            Designation = "Office Executive",
                            JobEndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobstartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            UserId = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77"),
                            businessCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            CompanyAddress = "Mirpur, Dhaka",
                            CompanyName = "ABC Ltd.",
                            Department = "Product",
                            Designation = "Office Executive",
                            JobEndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobstartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s",
                            UserId = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8"),
                            businessCategoryId = 1
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.ResultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("resultType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "First Division/Class"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Second Division/Class"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Third Division/Class"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Grade"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Appeared"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.PostModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("jobPostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("jobPostId");

                    b.ToTable("postModerators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            UserId = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3"),
                            jobPostId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 9, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            UserId = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071"),
                            jobPostId = 2
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ea4cb73-320d-43d2-83c2-c781c3e4d859"),
                            ConcurrencyStamp = "7355621a-5531-432f-b314-3537c7ceb342",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("84b24463-4d57-4b6c-8e1a-cc075bdcb8f8"),
                            ConcurrencyStamp = "d715b0d7-716b-4fbf-b23a-7d65898a4669",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("3e7de964-0803-42e6-a53b-57f9677e8e89"),
                            ConcurrencyStamp = "97490333-5e2d-4bbe-9a1b-b5f94b92577c",
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("572c5fd0-6e71-44c0-bdc2-3b5c6349290c"),
                            ConcurrencyStamp = "414c0b3f-4b82-4134-816d-a60ff801212b",
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33a1c5df-7a23-44ff-bf41-4c0518a2dac7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a70ecd46-b213-4237-aaf4-be616c13622a",
                            Email = "user1@superadmin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMebPV4Qh0aSKBN1QIkuO4CoEPNpG199pirNwVv7ccMKmdyKfo6ISAlB/sh5x1qOkg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "shaheen"
                        },
                        new
                        {
                            Id = new Guid("9a312145-99ed-4b25-a8a8-e8207083c164"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "713ea9da-791d-4914-b959-7716ff2b92b4",
                            Email = "user2@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJyOPGGE6llWWPpkS5FWJv1tsVgxBYSCEDyQN8tdQwr1n4jkz0Vpqv+4f/DrZRK2TQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "alex99"
                        },
                        new
                        {
                            Id = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab5f9d24-37aa-487f-8cee-331c3058a52a",
                            Email = "user3@employee.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENKb6TvbJgr/2s0tNEtz/GCad7ds4b9CZIL2ontz7ipSn/pZHwtllT/D0RP9J1/1Qg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "max99"
                        },
                        new
                        {
                            Id = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ebf5fd3-56d1-4bdd-8f38-faedec720799",
                            Email = "user4@employer.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIO8I4vZeUMSY6bcja9HOvi6GU5NnGEvAtY/eoeRm74rnhUQpWi3913a6GnJ6QIpkQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mario99"
                        },
                        new
                        {
                            Id = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e30712ce-f7d5-4b82-817c-cfc204165c8a",
                            Email = "user5@employer.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOxjVEYJ0GYTso2RpUOjIO+8ZLfZ6c9FofoWMeiyadqtvfNn4KYQCh/IQBOANCM44A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mark99"
                        },
                        new
                        {
                            Id = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e92a2cbf-df0a-403c-97a0-20214638c048",
                            Email = "user6@employee.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJmGoZd6n3VHMlg3y5oNztyVjOUs2ojqq9N4RxZcjihMhk3Ejv1eNtpfcuTZgc1bVw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "antonio99"
                        },
                        new
                        {
                            Id = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b257ef1-91b2-4432-b70e-4dc262d2abac",
                            Email = "user7@employee.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDX3+IeZA+Lq8jW1b+r0WNo1al/imdczm4Cmrf/WNG1VV2aai9pvIku/v97De1q/PQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rio99"
                        },
                        new
                        {
                            Id = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a0b29e9-2a07-4f58-9424-eafbac4c05df",
                            Email = "user8@employee.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGuJTszMAfYcvmu2R7o7CgNorN1GOodx9yO2TPC6/h7HP1ka8vanATKUTlpYkxR+0g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "rinia99"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.UserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33a1c5df-7a23-44ff-bf41-4c0518a2dac7"),
                            RoleId = new Guid("7ea4cb73-320d-43d2-83c2-c781c3e4d859")
                        },
                        new
                        {
                            UserId = new Guid("9a312145-99ed-4b25-a8a8-e8207083c164"),
                            RoleId = new Guid("84b24463-4d57-4b6c-8e1a-cc075bdcb8f8")
                        },
                        new
                        {
                            UserId = new Guid("672481c0-fcc3-41d5-90e2-51c7fc3abf02"),
                            RoleId = new Guid("3e7de964-0803-42e6-a53b-57f9677e8e89")
                        },
                        new
                        {
                            UserId = new Guid("e4915472-c6a0-4216-ad8c-e529fee2b9b3"),
                            RoleId = new Guid("572c5fd0-6e71-44c0-bdc2-3b5c6349290c")
                        },
                        new
                        {
                            UserId = new Guid("a68c8c8d-6de6-4671-b833-38053a5ab071"),
                            RoleId = new Guid("572c5fd0-6e71-44c0-bdc2-3b5c6349290c")
                        },
                        new
                        {
                            UserId = new Guid("857da82f-65f5-4c81-9404-8ab003989aa2"),
                            RoleId = new Guid("3e7de964-0803-42e6-a53b-57f9677e8e89")
                        },
                        new
                        {
                            UserId = new Guid("c12b6fa3-2c90-44e4-9b69-084fbf541b77"),
                            RoleId = new Guid("3e7de964-0803-42e6-a53b-57f9677e8e89")
                        },
                        new
                        {
                            UserId = new Guid("8a06a0de-c1b0-4d58-9e2a-cdd63cbeb6f8"),
                            RoleId = new Guid("3e7de964-0803-42e6-a53b-57f9677e8e89")
                        });
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AddressManagement.PoliceStation", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.AddressManagement.District", "District")
                        .WithMany("PoliceStations")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.AdminUser", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.JobProviderUser", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.BusinessCategory", "BusinessCategory")
                        .WithMany("jobProviderUsers")
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.AddressManagement.District", null)
                        .WithMany("CompanyInformation")
                        .HasForeignKey("DistrictId");

                    b.HasOne("JobPortalApp.Model.db_models.AddressManagement.PoliceStation", "PoliceStation")
                        .WithMany("CompanyInformation")
                        .HasForeignKey("PoliceStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessCategory");

                    b.Navigation("PoliceStation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.JobSeekerUser", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.AddressManagement.PoliceStation", "policeStation")
                        .WithMany("jobSeekers")
                        .HasForeignKey("present_PoliceStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("policeStation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.ApplyJob", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.JobPost", "jobPost")
                        .WithMany()
                        .HasForeignKey("JobCircularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.AppUser.JobSeekerUser", null)
                        .WithMany("applyJobs")
                        .HasForeignKey("JobSeekerUserId");

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jobPost");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.CvBankQuery", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.BusinessCategory", "businessCategory")
                        .WithMany()
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.Packages", "packages")
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("businessCategory");

                    b.Navigation("packages");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.InterviewInvitation", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.ApplyJob", "applyJob")
                        .WithMany()
                        .HasForeignKey("AppliedJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applyJob");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.Invoice", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.Packages", "packages")
                        .WithMany("invoices")
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("packages");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.JobPost", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.BusinessCategory", "businessCategory")
                        .WithMany("jobPosts")
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.JobSeekerInfo.EducationLevel", "educationLevel")
                        .WithMany()
                        .HasForeignKey("MinimumEducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.Packages", "packages")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("businessCategory");

                    b.Navigation("educationLevel");

                    b.Navigation("packages");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.ViewResumeList", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "JobSeekerUser")
                        .WithMany()
                        .HasForeignKey("JobSeekerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("JobSeekerUser");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.AcademicInformation", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobSeekerInfo.DegreeInfo", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.JobSeekerInfo.ResultType", "resultType")
                        .WithMany()
                        .HasForeignKey("ResultTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("resultType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.CareerInformation", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.BusinessCategory", "businessCategory")
                        .WithMany("CareerInformation")
                        .HasForeignKey("businessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("businessCategory");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.DegreeInfo", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.JobSeekerInfo.EducationLevel", "educationLevel")
                        .WithMany()
                        .HasForeignKey("educationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("educationLevel");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobSeekerInfo.EmploymentHistory", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.BusinessCategory", "businessCategory")
                        .WithMany()
                        .HasForeignKey("businessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("businessCategory");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.PostModerator", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.JobProviderAreas.JobPost", "jobPost")
                        .WithMany("postModerators")
                        .HasForeignKey("jobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jobPost");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.Report", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", "user")
                        .WithMany()
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalApp.Model.db_models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("JobPortalApp.Model.db_models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AddressManagement.District", b =>
                {
                    b.Navigation("CompanyInformation");

                    b.Navigation("PoliceStations");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AddressManagement.PoliceStation", b =>
                {
                    b.Navigation("CompanyInformation");

                    b.Navigation("jobSeekers");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.AppUser.JobSeekerUser", b =>
                {
                    b.Navigation("applyJobs");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.BusinessCategory", b =>
                {
                    b.Navigation("CareerInformation");

                    b.Navigation("jobPosts");

                    b.Navigation("jobProviderUsers");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.JobPost", b =>
                {
                    b.Navigation("postModerators");
                });

            modelBuilder.Entity("JobPortalApp.Model.db_models.JobProviderAreas.Packages", b =>
                {
                    b.Navigation("invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
